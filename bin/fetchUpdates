#!/usr/bin/env node

'use strict';

/**
 * Adding profiling tools
 */
if(process.env.NODETIME_ACCOUNT_KEY) {
  require('nodetime').profile({
    accountKey: process.env.NODETIME_ACCOUNT_KEY,
    appName: 'PodR'
  });
}
require('../newrelic');

// Load configurations
// Set the node environment variable if not set before
process.env.NODE_ENV = process.env.NODE_ENV || 'development';

// Initializing system variables
var config = require('../config/config'),
  FeedParser = require('feedparser'),
  fs = require('fs'),
  http = require('http'),
  https = require('https'),
  mongoose = require('mongoose'),
  path = require('path'),
  EpisodeObj = require('../app/models/episode'),
  PodcastObj = require('../app/models/podcast'),
  UserPodcastObj = require('../app/models/userpodcast');

// Bootstrap db connection
var db = mongoose.connect(config.db);

var sendgrid  = require('sendgrid')(
  process.env.SENDGRID_USERNAME,
  process.env.SENDGRID_PASSWORD
);

// Bootstrap models
var models_path = path.join('' + __dirname, '../app/models');
var walk = function(path) {
  fs.readdirSync(path).forEach(function(file) {
    var newPath = path + '/' + file;
    var stat = fs.statSync(newPath);
    if (stat.isFile()) {
      if(/(.*)\.(js$|coffee$)/.test(file)) {
        require(newPath);
      }
    } else if (stat.isDirectory()) {
      walk(newPath);
    }
  });
};
walk(models_path);

function stringTimeToSeconds(input) {
    var seconds = 0;

    var timeArray = input.split(':');
    for(var i = 0; i < timeArray.length; i++) {
        seconds = seconds * 60 + timeArray[i];
    }

    return seconds;
}

var Episode = mongoose.model('Episode');
var Podcast = mongoose.model('Podcast');
var UserPodcast = mongoose.model('UserPodcast');

function parseHttpResponse(res, podcast) {
  var episodes = [];

  res.pipe(new FeedParser({}))
  .on('error', function(error) {
    console.log(error);
  })
  .on('meta', function(meta) {
    // TODO: Error handling
    if(meta['itunes:author'] !== undefined)
    podcast.author = meta['itunes:author']['#'];

    if(meta['itunes:block'] !== undefined)
    podcast.block = (meta['itunes:block']['#']).toLowerCase() === 'yes';
    if(meta['itunes:complete'] !== undefined)
    podcast.complete = (meta['itunes:complete']['#']).toLowerCase() === 'yes';
    podcast.copyright = meta.copyright;

    // TODO: Probably not a good if-case
    if(meta['itunes:summary'] !== undefined)
    podcast.description = meta['itunes:summary']['#'];
    else
    podcast.description = meta.description;

    if(meta['itunes:explicit'] !== undefined)
    podcast.explicit = (meta['itunes:explicit']['#']).toLowerCase() === 'yes';

    podcast.imageTitle = meta.image.title;
    podcast.imageUrl = meta.image.url;
    podcast.language = meta.language;
    podcast.link = meta.link;

    if(meta['itunes:owner'] !== undefined) {
    if(meta['itunes:owner']['itunes:email'] !== undefined)
    podcast.ownerEmail = meta['itunes:owner']['itunes:email']['#'];
    if(meta['itunes:owner']['itunes:name'] !== undefined)
    podcast.ownerName = meta['itunes:owner']['itunes:name']['#'];
    }

    if(meta['itunes:subtitle'] !== undefined)
    podcast.subtitle = meta['itunes:subtitle']['#'];

    if(meta['itunes:new-feed-url'] !== undefined)
    podcast.url = meta['itunes:new-feed-url']['#'];

    podcast.title = meta.title;
    podcast.updated = Date.now();
  })
  .on('readable', function() {
    var stream = this, item;

    while (item = stream.read()) {
      // Each 'readable' event will contain one episode
      var episode = new Episode();
      episode.created = podcast.updated;
      episode.title = item.title;
      episode.podcast = podcast;
      episode.guid = item.guid;
      episode.published = item.pubDate;
      episode.imageTitle = item.image.title;
      episode.imageUrl = item.image.url;

      if (item['itunes:author'] !== undefined)
      episode.author = item['itunes:author']['#'];

      if (item['itunes:block'] !== undefined)
      episode.block = (item['itunes:block']['#']).toLowerCase() === 'yes';

      if (item['itunes:duration'] !== undefined) {
      episode.duration = stringTimeToSeconds(item['itunes:duration']['#']);
      }

      if(item['itunes:explicit'] !== undefined)
      episode.explicit = (item['itunes:explicit']['#']).toLowerCase() === 'yes';

      if(item['itunes:isClosedCaptioned'] !== undefined)
      episode.closedcaptioned = (item['itunes:isClosedCaptioned']['#']).toLowerCase() === 'yes';

      if(item['itunes:block'] !== undefined)
      episode.block = (item['itunes:block']['#']).toLowerCase() === 'yes';

      if(item['itunes:subtitle'] !== undefined)
      episode.subtitle = item['itunes:subtitle']['#'];

      // TODO: Probably not a good if-case
      if(item['itunes:summary'] !== undefined)
      episode.description = item['itunes:summary']['#'];
      else
      episode.description = item.description;

      if(item['rss:enclosure'] !== undefined) {
      if(item['rss:enclosure']['@'].length !== undefined)
      episode.enclosureLength = item['rss:enclosure']['@'].length;
      if(item['rss:enclosure']['@'].type !== undefined)
      episode.enclosureType = item['rss:enclosure']['@'].type;
      if(item['rss:enclosure']['@'].url !== undefined)
      episode.enclosureUrl = item['rss:enclosure']['@'].url;
      }

      podcast.episodes.push(episode);
      episodes.push(episode);
    }
  })
  .on('end', function() {
    var newEpisodes = [];
    episodes.forEach(function(episode) {
      Episode.count({guid: episode.guid}, function (err, count) {
        if(count === 0) {
          episode.save(function(err) {
            if(err)
              console.log(err);
            else
              newEpisodes.push(episode);
          });
        }
      });
    });

    podcast.save(function(err) {
      if(err) {
        console.log(err);
      } else {
        console.log(newEpisodes.length + " new episodes was added for podcast " + podcast._id);

        if (newEpisodes.length > 0) {
          UserPodcast.find({ podcast: podcast }).populate('user').exec(function(err, ups) {
            if(err) {
              console.log(err);
            } else {
              ups.forEach(function(up) {
                console.log("Sending mail to " + up.user.email);
                sendgrid.send({
                  to: up.user.email,
                  from: 'podr@email.com',
                  subject: 'PodR - There are ' + newEpisodes.length + ' new episodes',
                  text: 'There are ' + newEpisodes.length + ' new episodes in \'' + podcast.title + '\''
                }, function(err, json) {
                  if (err) {
                    console.error(err);
                  }
                });
              });
            }
          });
        }
      }
    });
  });
}

Podcast.find().sort('title').exec(function(err, podcasts) {
  if(err) {
    /*res.render('error', {
    status: 500
    });*/
  } else {
    podcasts.forEach(function(podcast) {
      if(podcast.url.indexOf("https://") > -1) {
        https.get(podcast.url, function(res) {
          parseHttpResponse(res, podcast);
        }).on('error', function(e) {
          console.log("Got error: " + e.message);
        });
      } else {
        http.get(podcast.url, function(res) {
          parseHttpResponse(res, podcast);
        }).on('error', function(e) {
          console.log("Got error: " + e.message);
        });
      }
    });
  }
});
